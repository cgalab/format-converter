#!/usr/bin/python3

"""Loader for .line formatted graphs."""

if __name__ == '__main__' and __package__ is None:
    import os
    __LEVEL = 1
    os.sys.path.append(os.path.abspath(os.path.join(*([os.path.dirname(__file__)] + ['..']*__LEVEL))))

from ORD53.formats.Line import LineLoader
from ORD53.formats.Ipe import IpeLoader
from ORD53.formats.Obj import ObjLoader
from ORD53.formats.GraphML import GraphMLLoader
import os.path
import sys

loaders = [ GraphMLLoader, LineLoader, IpeLoader, ObjLoader ]
def main():
    """Load a graph from stdin or a file."""
    import argparse
    import sys

    parser = argparse.ArgumentParser(description='Load a graph and output it in ord53 format')
    parser.add_argument('inputfile', help='Inputfile', nargs='?', type=argparse.FileType('r'), default=sys.stdin)
    parser.add_argument('outputfile', help='Outputfile (.graphml)', nargs='?')
    parser.add_argument('-f', '--flatten', action='store_true', default=False, help='flatten views and pages')
    parser.add_argument('-r', '--randomize-weights', action='store_true', default=False, help='randomize edge weights')

    args = parser.parse_args()

    _, ext = os.path.splitext(args.inputfile.name)
    content = args.inputfile.read()

    graphs = None
    for l in loaders:
        if ext == '' or ext == l.extension:
            try:
                graphs = l.load(content, args.inputfile.name, args)
                break
            except Exception as e:
                if ext != '': raise e

    if graphs is None:
        print("No loader found.", file=sys.stderr)
        sys.exit(1)

    if not isinstance(graphs, list):
        graphs = [graphs]

    if args.randomize_weights:
      for g in graphs:
        g.randomize_weights()

    if args.outputfile is None:
        for g in graphs:
            g.write_graphml( sys.stdout.buffer )
    else:
        start, ext = os.path.splitext(args.outputfile)
        for i, g in enumerate(graphs):
            fn = "%s-%03d%s"%(start, i, ext) if not args.flatten else args.outputfile
            with open(fn, 'bw') as f:
                g.write_graphml(f)

if __name__ == '__main__' and __package__ is None:
    main()
