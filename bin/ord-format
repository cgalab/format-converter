#!/usr/bin/python3

"""Loader for .line formatted graphs."""

if __name__ == '__main__' and __package__ is None:
    import os
    __LEVEL = 1
    path_elems = [os.path.dirname(os.path.realpath(__file__))] + ['..']*__LEVEL
    extra_path = os.path.abspath(os.path.join( *path_elems ))
    os.sys.path.append( extra_path )

from ORD53.formats.Line import LineLoader
from ORD53.formats.Poly import PolyLoader
from ORD53.formats.Ipe import IpeLoader
from ORD53.formats.Obj import ObjLoader
from ORD53.formats.Site import SiteLoader
from ORD53.formats.GraphML import GraphMLLoader
import os.path
import sys

def write_graph(args, g, f):
    if args.ipe:
        g.write_ipe(f, args.ipe_markers)
    elif args.obj:
        g.write_obj(f,args.obj_zero)
    else:
        g.write_graphml(f)

loaders = [ GraphMLLoader, LineLoader, PolyLoader, IpeLoader, ObjLoader, SiteLoader ]
def main():
    """Load a graph from stdin or a file."""
    import argparse
    import sys

    parser = argparse.ArgumentParser(description='Load a graph and output it in ord53 format')
    parser.add_argument('inputfile', help='Inputfile', nargs='?', type=argparse.FileType('r'), default=sys.stdin)
    parser.add_argument('outputfile', help='Outputfile (.graphml)', nargs='?')
    parser.add_argument('-I', '--ipe', action='store_true', default=False, help='create ipe output')
    parser.add_argument('-O', '--obj', action='store_true', default=False, help='create obj output')
    parser.add_argument('-Z', '--obj-zero', action='store_true', default=False, help='zero offset obj output')
    parser.add_argument('-M', '--ipe-markers', action='store_true', default=False, help='add markers to vertices in ipe output')
    parser.add_argument('-f', '--flatten', action='store_true', default=False, help='flatten views and pages')
    parser.add_argument('-r', '--randomize-weights', action='store_true', default=False, help='randomize edge weights')
    parser.add_argument('--randomize-min', metavar='RND_MIN', type=float, default=None, help='smallest edge weight')
    parser.add_argument('--randomize-max', metavar='RND_MAX', type=float, default=None, help='largest edge weight')
    parser.add_argument('-R', '--randomize-digits', metavar='RND_DIGITS', type=int, default=None, help='round random weight to this many digits')
    parser.add_argument('-S', '--scale', metavar='FACTOR', type=float, help='scale input by factor')

    args = parser.parse_args()

    _, ext = os.path.splitext(args.inputfile.name)
    content = args.inputfile.read()

    graphs = None
    for l in loaders:
        if ext == '' or ext == l.extension:
            try:
                graphs = l.load(content, args.inputfile.name, args)
                if isinstance(graphs, list):
                    if len(graphs) > 0 and len(graphs[0].edges) > 0:
                        break
                elif graphs is not None and len(graphs.edges) > 0:
                    break
                else:
                    graphs = None
            except Exception as e:
                if ext != '': raise e

    if graphs is None:
        print("No loader found.", file=sys.stderr)
        sys.exit(1)

    if not isinstance(graphs, list):
        graphs = [graphs]

    if args.randomize_weights:
      for g in graphs:
        kwargs = {}
        if args.randomize_min is not None: kwargs['rnd_lower'] = args.randomize_min
        if args.randomize_max is not None: kwargs['rnd_upper'] = args.randomize_max
        if args.randomize_digits is not None: kwargs['round_n'] = args.randomize_digits
        g.randomize_weights(**kwargs)

    for g in graphs:
        g.transform_coordinates(scale=args.scale)

    if args.outputfile is None:
        for g in graphs:
            write_graph(args, g, sys.stdout.buffer)
    else:
        start, ext = os.path.splitext(args.outputfile)
        for i, g in enumerate(graphs):
            fn = "%s-%03d%s"%(start, i, ext) if not args.flatten else args.outputfile
            with open(fn, 'bw') as f:
                write_graph(args, g, f)

if __name__ == '__main__' and __package__ is None:
    main()
